{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from \"react\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Title from \"../components/ui/Title\";\nimport Colors from \"../constants/colors\";\nimport Card from \"../components/ui/Card\";\nimport InstructionText from \"../components/ui/InstructionText\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction StartGameScreen(_ref) {\n  var onPickNumber = _ref.onPickNumber;\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    enteredNumber = _useState2[0],\n    setEnteredNumber = _useState2[1];\n  function numberInputHandler(enteredText) {\n    setEnteredNumber(enteredText);\n  }\n  function resetInputHandler() {\n    setEnteredNumber(\"\");\n  }\n  function confirmInputHandler() {\n    var chosenNumber = parseInt(enteredNumber);\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n      Alert.alert(\"Invalid number!\", \"Number has to be a number between 1 and 99.\", [{\n        text: \"Okay\",\n        style: \"destructive\",\n        onPress: resetInputHandler\n      }]);\n      return;\n    }\n    onPickNumber(chosenNumber);\n  }\n  return _jsxs(View, {\n    style: styles.rootContainer,\n    children: [_jsx(Title, {\n      children: \"Guess My Number\"\n    }), _jsxs(Card, {\n      children: [_jsx(InstructionText, {\n        children: \"Enter a Number\"\n      }), _jsx(TextInput, {\n        style: styles.numberInput,\n        maxLength: 2,\n        keyboardType: \"number-pad\",\n        autoCapitalize: \"none\",\n        autoCorrect: false,\n        onChangeText: numberInputHandler,\n        value: enteredNumber\n      }), _jsxs(View, {\n        style: styles.buttonsContainer,\n        children: [_jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: resetInputHandler,\n            children: \"Reset\"\n          })\n        }), _jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(PrimaryButton, {\n            onPress: confirmInputHandler,\n            children: \"Confirm\"\n          })\n        })]\n      })]\n    })]\n  });\n}\nexport default StartGameScreen;\nvar styles = StyleSheet.create({\n  rootContainer: {\n    flex: 1,\n    marginTop: 100,\n    alignItems: \"center\"\n  },\n  numberInput: {\n    height: 50,\n    width: 50,\n    fontSize: 32,\n    borderBottomColor: Colors.accent500,\n    borderBottomWidth: 2,\n    color: Colors.accent500,\n    marginVertical: 8,\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  buttonsContainer: {\n    flexDirection: \"row\"\n  },\n  buttonContainer: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["useState","PrimaryButton","Title","Colors","Card","InstructionText","StartGameScreen","onPickNumber","enteredNumber","setEnteredNumber","numberInputHandler","enteredText","resetInputHandler","confirmInputHandler","chosenNumber","parseInt","isNaN","Alert","alert","text","style","onPress","styles","rootContainer","numberInput","buttonsContainer","buttonContainer","StyleSheet","create","flex","marginTop","alignItems","height","width","fontSize","borderBottomColor","accent500","borderBottomWidth","color","marginVertical","fontWeight","textAlign","flexDirection"],"sources":["C:/Users/ACER/Desktop/rnMiniGame/starting-project/screens/StartGameScreen.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { TextInput, View, StyleSheet, Alert } from \"react-native\";\r\n\r\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\r\nimport Title from \"../components/ui/Title\";\r\nimport Colors from \"../constants/colors\";\r\nimport Card from \"../components/ui/Card\";\r\nimport InstructionText from \"../components/ui/InstructionText\";\r\n\r\nfunction StartGameScreen({ onPickNumber }) {\r\n  const [enteredNumber, setEnteredNumber] = useState(\"\");\r\n\r\n  function numberInputHandler(enteredText) {\r\n    setEnteredNumber(enteredText);\r\n  }\r\n\r\n  function resetInputHandler() {\r\n    setEnteredNumber(\"\");\r\n  }\r\n\r\n  function confirmInputHandler() {\r\n    const chosenNumber = parseInt(enteredNumber);\r\n\r\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\r\n      Alert.alert(\r\n        \"Invalid number!\",\r\n        \"Number has to be a number between 1 and 99.\",\r\n        [{ text: \"Okay\", style: \"destructive\", onPress: resetInputHandler }]\r\n      );\r\n      return;\r\n    }\r\n\r\n    onPickNumber(chosenNumber);\r\n  }\r\n\r\n  return (\r\n    <View style={styles.rootContainer}>\r\n      <Title>Guess My Number</Title>\r\n      <Card>\r\n        <InstructionText>Enter a Number</InstructionText>\r\n        <TextInput\r\n          style={styles.numberInput}\r\n          maxLength={2}\r\n          keyboardType=\"number-pad\"\r\n          autoCapitalize=\"none\"\r\n          autoCorrect={false}\r\n          onChangeText={numberInputHandler}\r\n          value={enteredNumber}\r\n        />\r\n        <View style={styles.buttonsContainer}>\r\n          <View style={styles.buttonContainer}>\r\n            <PrimaryButton onPress={resetInputHandler}>Reset</PrimaryButton>\r\n          </View>\r\n          <View style={styles.buttonContainer}>\r\n            <PrimaryButton onPress={confirmInputHandler}>Confirm</PrimaryButton>\r\n          </View>\r\n        </View>\r\n      </Card>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default StartGameScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  rootContainer: {\r\n    flex: 1,\r\n    marginTop: 100,\r\n    alignItems: \"center\",\r\n  },\r\n  numberInput: {\r\n    height: 50,\r\n    width: 50,\r\n    fontSize: 32,\r\n    borderBottomColor: Colors.accent500,\r\n    borderBottomWidth: 2,\r\n    color: Colors.accent500,\r\n    marginVertical: 8,\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n  },\r\n  buttonsContainer: {\r\n    flexDirection: \"row\",\r\n  },\r\n  buttonContainer: {\r\n    flex: 1,\r\n  },\r\n});\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAAA;AAAA;AAGjC,OAAOC,aAAa;AACpB,OAAOC,KAAK;AACZ,OAAOC,MAAM;AACb,OAAOC,IAAI;AACX,OAAOC,eAAe;AAAyC;AAAA;AAE/D,SAASC,eAAe,OAAmB;EAAA,IAAhBC,YAAY,QAAZA,YAAY;EACrC,gBAA0CP,QAAQ,CAAC,EAAE,CAAC;IAAA;IAA/CQ,aAAa;IAAEC,gBAAgB;EAEtC,SAASC,kBAAkB,CAACC,WAAW,EAAE;IACvCF,gBAAgB,CAACE,WAAW,CAAC;EAC/B;EAEA,SAASC,iBAAiB,GAAG;IAC3BH,gBAAgB,CAAC,EAAE,CAAC;EACtB;EAEA,SAASI,mBAAmB,GAAG;IAC7B,IAAMC,YAAY,GAAGC,QAAQ,CAACP,aAAa,CAAC;IAE5C,IAAIQ,KAAK,CAACF,YAAY,CAAC,IAAIA,YAAY,IAAI,CAAC,IAAIA,YAAY,GAAG,EAAE,EAAE;MACjEG,KAAK,CAACC,KAAK,CACT,iBAAiB,EACjB,6CAA6C,EAC7C,CAAC;QAAEC,IAAI,EAAE,MAAM;QAAEC,KAAK,EAAE,aAAa;QAAEC,OAAO,EAAET;MAAkB,CAAC,CAAC,CACrE;MACD;IACF;IAEAL,YAAY,CAACO,YAAY,CAAC;EAC5B;EAEA,OACE,MAAC,IAAI;IAAC,KAAK,EAAEQ,MAAM,CAACC,aAAc;IAAA,WAChC,KAAC,KAAK;MAAA,UAAC;IAAe,EAAQ,EAC9B,MAAC,IAAI;MAAA,WACH,KAAC,eAAe;QAAA,UAAC;MAAc,EAAkB,EACjD,KAAC,SAAS;QACR,KAAK,EAAED,MAAM,CAACE,WAAY;QAC1B,SAAS,EAAE,CAAE;QACb,YAAY,EAAC,YAAY;QACzB,cAAc,EAAC,MAAM;QACrB,WAAW,EAAE,KAAM;QACnB,YAAY,EAAEd,kBAAmB;QACjC,KAAK,EAAEF;MAAc,EACrB,EACF,MAAC,IAAI;QAAC,KAAK,EAAEc,MAAM,CAACG,gBAAiB;QAAA,WACnC,KAAC,IAAI;UAAC,KAAK,EAAEH,MAAM,CAACI,eAAgB;UAAA,UAClC,KAAC,aAAa;YAAC,OAAO,EAAEd,iBAAkB;YAAA,UAAC;UAAK;QAAgB,EAC3D,EACP,KAAC,IAAI;UAAC,KAAK,EAAEU,MAAM,CAACI,eAAgB;UAAA,UAClC,KAAC,aAAa;YAAC,OAAO,EAAEb,mBAAoB;YAAA,UAAC;UAAO;QAAgB,EAC/D;MAAA,EACF;IAAA,EACF;EAAA,EACF;AAEX;AAEA,eAAeP,eAAe;AAE9B,IAAMgB,MAAM,GAAGK,UAAU,CAACC,MAAM,CAAC;EAC/BL,aAAa,EAAE;IACbM,IAAI,EAAE,CAAC;IACPC,SAAS,EAAE,GAAG;IACdC,UAAU,EAAE;EACd,CAAC;EACDP,WAAW,EAAE;IACXQ,MAAM,EAAE,EAAE;IACVC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE,EAAE;IACZC,iBAAiB,EAAEhC,MAAM,CAACiC,SAAS;IACnCC,iBAAiB,EAAE,CAAC;IACpBC,KAAK,EAAEnC,MAAM,CAACiC,SAAS;IACvBG,cAAc,EAAE,CAAC;IACjBC,UAAU,EAAE,MAAM;IAClBC,SAAS,EAAE;EACb,CAAC;EACDhB,gBAAgB,EAAE;IAChBiB,aAAa,EAAE;EACjB,CAAC;EACDhB,eAAe,EAAE;IACfG,IAAI,EAAE;EACR;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}