{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport NumberContainer from \"../components/game/NumberContainer\";\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\nimport Title from \"../components/ui/Title\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction generateRandomBetween(min, max, exclude) {\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n}\nvar minBoundary = 1;\nvar maxBoundary = 100;\nfunction GameScreen(_ref) {\n  var userNumber = _ref.userNumber,\n    onGameOver = _ref.onGameOver;\n  var initialGuess = generateRandomBetween(1, 100, userNumber);\n  var _useState = useState(initialGuess),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentGuess = _useState2[0],\n    setCurrentGuess = _useState2[1];\n  useEffect(function () {\n    if (currentGuess === userNumber) {\n      onGameOver();\n    }\n  }, [currentGuess, userNumber, onGameOver]);\n  function nextGuessHandler(direction) {\n    if (direction === \"lower\" && currentGuess < userNumber || direction === \"greater\" && currentGuess > userNumber) {\n      Alert.alert(\"Don't lie!\", \"You know that this is wrong...\", [{\n        text: \"Sorry!\",\n        style: \"cancel\"\n      }]);\n      return;\n    }\n    if (direction === \"lower\") {\n      maxBoundary = currentGuess;\n    } else {\n      minBoundary = currentGuess + 1;\n    }\n    var newRndNumber = generateRandomBetween(minBoundary, maxBoundary, currentGuess);\n    setCurrentGuess(newRndNumber);\n  }\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Title, {\n      children: \"Opponent's Guess\"\n    }), _jsx(NumberContainer, {\n      children: currentGuess\n    }), _jsxs(View, {\n      children: [_jsx(Text, {\n        children: \"Higher or lower?\"\n      }), _jsxs(View, {\n        children: [_jsx(PrimaryButton, {\n          onPress: nextGuessHandler.bind(this, \"lower\"),\n          children: \"-\"\n        }), _jsx(PrimaryButton, {\n          onPress: nextGuessHandler.bind(this, \"greater\"),\n          children: \"+\"\n        })]\n      })]\n    })]\n  });\n}\nexport default GameScreen;\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 24\n  }\n});","map":{"version":3,"names":["useState","useEffect","NumberContainer","PrimaryButton","Title","generateRandomBetween","min","max","exclude","rndNum","Math","floor","random","minBoundary","maxBoundary","GameScreen","userNumber","onGameOver","initialGuess","currentGuess","setCurrentGuess","nextGuessHandler","direction","Alert","alert","text","style","newRndNumber","styles","screen","bind","StyleSheet","create","flex","padding"],"sources":["C:/Users/ACER/Desktop/rnMiniGame/starting-project/screens/GameScreen.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { View, Text, StyleSheet, Alert } from \"react-native\";\r\n\r\nimport NumberContainer from \"../components/game/NumberContainer\";\r\nimport PrimaryButton from \"../components/ui/PrimaryButton\";\r\nimport Title from \"../components/ui/Title\";\r\n\r\nfunction generateRandomBetween(min, max, exclude) {\r\n  const rndNum = Math.floor(Math.random() * (max - min)) + min;\r\n\r\n  if (rndNum === exclude) {\r\n    return generateRandomBetween(min, max, exclude);\r\n  } else {\r\n    return rndNum;\r\n  }\r\n}\r\n\r\nlet minBoundary = 1;\r\nlet maxBoundary = 100;\r\n\r\nfunction GameScreen({ userNumber, onGameOver }) {\r\n  const initialGuess = generateRandomBetween(1, 100, userNumber);\r\n  const [currentGuess, setCurrentGuess] = useState(initialGuess);\r\n\r\n  useEffect(() => {\r\n    if (currentGuess === userNumber) {\r\n      onGameOver();\r\n    }\r\n  }, [currentGuess, userNumber, onGameOver]);\r\n\r\n  function nextGuessHandler(direction) {\r\n    // direction => 'lower', 'greater'\r\n    if (\r\n      (direction === \"lower\" && currentGuess < userNumber) ||\r\n      (direction === \"greater\" && currentGuess > userNumber)\r\n    ) {\r\n      Alert.alert(\"Don't lie!\", \"You know that this is wrong...\", [\r\n        { text: \"Sorry!\", style: \"cancel\" },\r\n      ]);\r\n      return;\r\n    }\r\n\r\n    if (direction === \"lower\") {\r\n      maxBoundary = currentGuess;\r\n    } else {\r\n      minBoundary = currentGuess + 1;\r\n    }\r\n\r\n    const newRndNumber = generateRandomBetween(\r\n      minBoundary,\r\n      maxBoundary,\r\n      currentGuess\r\n    );\r\n    setCurrentGuess(newRndNumber);\r\n  }\r\n\r\n  return (\r\n    <View style={styles.screen}>\r\n      <Title>Opponent's Guess</Title>\r\n      <NumberContainer>{currentGuess}</NumberContainer>\r\n      <View>\r\n        <Text>Higher or lower?</Text>\r\n        <View>\r\n          <PrimaryButton onPress={nextGuessHandler.bind(this, \"lower\")}>\r\n            -\r\n          </PrimaryButton>\r\n          <PrimaryButton onPress={nextGuessHandler.bind(this, \"greater\")}>\r\n            +\r\n          </PrimaryButton>\r\n        </View>\r\n      </View>\r\n      {/* <View>LOG ROUNDS</View> */}\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default GameScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  screen: {\r\n    flex: 1,\r\n    padding: 24,\r\n  },\r\n});\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC;AAAA;AAAA;AAAA;AAG5C,OAAOC,eAAe;AACtB,OAAOC,aAAa;AACpB,OAAOC,KAAK;AAA+B;AAAA;AAE3C,SAASC,qBAAqB,CAACC,GAAG,EAAEC,GAAG,EAAEC,OAAO,EAAE;EAChD,IAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIL,GAAG,GAAGD,GAAG,CAAC,CAAC,GAAGA,GAAG;EAE5D,IAAIG,MAAM,KAAKD,OAAO,EAAE;IACtB,OAAOH,qBAAqB,CAACC,GAAG,EAAEC,GAAG,EAAEC,OAAO,CAAC;EACjD,CAAC,MAAM;IACL,OAAOC,MAAM;EACf;AACF;AAEA,IAAII,WAAW,GAAG,CAAC;AACnB,IAAIC,WAAW,GAAG,GAAG;AAErB,SAASC,UAAU,OAA6B;EAAA,IAA1BC,UAAU,QAAVA,UAAU;IAAEC,UAAU,QAAVA,UAAU;EAC1C,IAAMC,YAAY,GAAGb,qBAAqB,CAAC,CAAC,EAAE,GAAG,EAAEW,UAAU,CAAC;EAC9D,gBAAwChB,QAAQ,CAACkB,YAAY,CAAC;IAAA;IAAvDC,YAAY;IAAEC,eAAe;EAEpCnB,SAAS,CAAC,YAAM;IACd,IAAIkB,YAAY,KAAKH,UAAU,EAAE;MAC/BC,UAAU,EAAE;IACd;EACF,CAAC,EAAE,CAACE,YAAY,EAAEH,UAAU,EAAEC,UAAU,CAAC,CAAC;EAE1C,SAASI,gBAAgB,CAACC,SAAS,EAAE;IAEnC,IACGA,SAAS,KAAK,OAAO,IAAIH,YAAY,GAAGH,UAAU,IAClDM,SAAS,KAAK,SAAS,IAAIH,YAAY,GAAGH,UAAW,EACtD;MACAO,KAAK,CAACC,KAAK,CAAC,YAAY,EAAE,gCAAgC,EAAE,CAC1D;QAAEC,IAAI,EAAE,QAAQ;QAAEC,KAAK,EAAE;MAAS,CAAC,CACpC,CAAC;MACF;IACF;IAEA,IAAIJ,SAAS,KAAK,OAAO,EAAE;MACzBR,WAAW,GAAGK,YAAY;IAC5B,CAAC,MAAM;MACLN,WAAW,GAAGM,YAAY,GAAG,CAAC;IAChC;IAEA,IAAMQ,YAAY,GAAGtB,qBAAqB,CACxCQ,WAAW,EACXC,WAAW,EACXK,YAAY,CACb;IACDC,eAAe,CAACO,YAAY,CAAC;EAC/B;EAEA,OACE,MAAC,IAAI;IAAC,KAAK,EAAEC,MAAM,CAACC,MAAO;IAAA,WACzB,KAAC,KAAK;MAAA,UAAC;IAAgB,EAAQ,EAC/B,KAAC,eAAe;MAAA,UAAEV;IAAY,EAAmB,EACjD,MAAC,IAAI;MAAA,WACH,KAAC,IAAI;QAAA,UAAC;MAAgB,EAAO,EAC7B,MAAC,IAAI;QAAA,WACH,KAAC,aAAa;UAAC,OAAO,EAAEE,gBAAgB,CAACS,IAAI,CAAC,IAAI,EAAE,OAAO,CAAE;UAAA,UAAC;QAE9D,EAAgB,EAChB,KAAC,aAAa;UAAC,OAAO,EAAET,gBAAgB,CAACS,IAAI,CAAC,IAAI,EAAE,SAAS,CAAE;UAAA,UAAC;QAEhE,EAAgB;MAAA,EACX;IAAA,EACF;EAAA,EAEF;AAEX;AAEA,eAAef,UAAU;AAEzB,IAAMa,MAAM,GAAGG,UAAU,CAACC,MAAM,CAAC;EAC/BH,MAAM,EAAE;IACNI,IAAI,EAAE,CAAC;IACPC,OAAO,EAAE;EACX;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}